USE master;

sp_who

DROP DATABASE Inventariesystem;

-- Skapa databasen
CREATE DATABASE Inventariesystem;

USE Inventariesystem;

-- Skapa tabeller
CREATE TABLE Suppliers (
    SupplierID INT PRIMARY KEY IDENTITY,
    SupplierName NVARCHAR(100) UNIQUE,
    ContactInfo NVARCHAR(255)
);

CREATE TABLE Products (
    ProductID INT PRIMARY KEY IDENTITY,
    ProductName NVARCHAR(100),
    SKU NVARCHAR(50) UNIQUE,
    Price DECIMAL(10, 2),
    SupplierID INT NOT NULL,
    FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID)
);

CREATE TABLE Warehouses (
    WarehouseID INT PRIMARY KEY IDENTITY,
    Location NVARCHAR(100),
    Capacity INT
);

CREATE TABLE Inventory (
    InventoryID INT PRIMARY KEY IDENTITY,
    ProductID INT NOT NULL,
    WarehouseID INT NOT NULL,
    Quantity INT,
    LastUpdated DATETIME NULL,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
    FOREIGN KEY (WarehouseID) REFERENCES Warehouses(WarehouseID)
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY IDENTITY,
    OrderDate DATE NOT NULL,
    ProductID INT NOT NULL,
    Quantity INT NOT NULL,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);



CREATE TRIGGER UpdateInventoryTimestamp
ON Inventory
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Uppdatera LastUpdated med aktuell tid
    UPDATE Inventory
    SET LastUpdated = GETDATE()
    FROM Inventory i
    INNER JOIN Inserted ins ON i.InventoryID = ins.InventoryID;
END;

-- Lägg till exempeldata i tabeller
INSERT INTO Suppliers (SupplierName, ContactInfo) VALUES
('Supplier A', 'contact@supplierA.com'),
('Supplier B', 'contact@supplierB.com');

INSERT INTO Products (ProductName, SKU, Price, SupplierID) VALUES
('Product 1', 'SKU001', 100.00, 1),
('Product 2', 'SKU002', 200.00, 2);

INSERT INTO Warehouses (Location, Capacity) VALUES
('Stockholm', 500),
('Gothenburg', 300);

INSERT INTO Inventory (ProductID, WarehouseID, Quantity) VALUES
(1, 1, 50),
(2, 2, 30);

INSERT INTO Orders (OrderDate, ProductID, Quantity) VALUES
('2024-11-01', 1, 10),
('2024-11-05', 2, 5);


-- Skapa vyer för att visa data
CREATE VIEW WarehouseInventory AS
SELECT w.WarehouseID, w.Location, p.ProductName, i.Quantity
FROM Inventory i
INNER JOIN Products p ON i.ProductID = p.ProductID
INNER JOIN Warehouses w ON i.WarehouseID = w.WarehouseID;

SELECT * FROM WarehouseInventory;

CREATE VIEW SupplierProducts AS
SELECT s.SupplierName, p.ProductName, p.Price
FROM Products p
INNER JOIN Suppliers s ON p.SupplierID = s.SupplierID;

SELECT * FROM SupplierProducts;

-- Lagra procedur för att visa lagerstatus
CREATE PROCEDURE GetInventoryStatus
AS
BEGIN
    SELECT 
        w.Location, 
        p.ProductName, 
        i.Quantity
    FROM Inventory i
    INNER JOIN Products p ON i.ProductID = p.ProductID
    INNER JOIN Warehouses w ON i.WarehouseID = w.WarehouseID;
END;

EXEC GetInventoryStatus;

CREATE PROCEDURE AddOrders
    @ProductID INT,
    @Quantity INT,
    @OrderDate DATE
AS
BEGIN
    BEGIN TRANSACTION;

    BEGIN TRY
        INSERT INTO Orders (ProductID, Quantity, OrderDate)
        VALUES (@ProductID, @Quantity, @OrderDate);

        -- Uppdatera lager
        UPDATE Inventory
        SET Quantity = Quantity - @Quantity
        WHERE ProductID = @ProductID;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        THROW;
    END CATCH
END;

SELECT * FROM Orders;

EXEC AddOrder 
    @ProductID = 3, 
    @Quantity = 20, 
    @OrderDate = '2024-12-15';

    SELECT * FROM Orders;

EXEC GetInventoryStatus;

-- Visa totalt antal produkter i lager
SELECT COUNT(*) AS TotalProducts FROM Products;

-- Räkna ut medelpriset för produkter
SELECT AVG(Price) AS AveragePrice FROM Products;

-- Lägg till ny produkt
INSERT INTO Products (ProductName, SKU, Price, SupplierID)
VALUES ('Product 3', 'SKU003', 150.00, 1);

-- Uppdatera lagerkvantitet
UPDATE Inventory
SET Quantity = 60
WHERE InventoryID = 1;

-- Ta bort en order
DELETE FROM Orders
WHERE OrderID = 1;


--Uppdatera inventory för ngn product
UPDATE Inventory
SET Quantity = 70
WHERE InventoryID = 1;

-- Kontrollera resultatet
SELECT * FROM Inventory;

-- Visa koppling mellan produkter, lager och leverantörer
SELECT 
    p.ProductName, 
    s.SupplierName, 
    w.Location, 
    i.Quantity
FROM Inventory i
INNER JOIN Products p ON i.ProductID = p.ProductID
INNER JOIN Suppliers s ON p.SupplierID = s.SupplierID
INNER JOIN Warehouses w ON i.WarehouseID = w.WarehouseID;
